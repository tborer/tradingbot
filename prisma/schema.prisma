generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id         String   @id @db.Uuid
  email      String   @unique
  createdAt  DateTime @default(now())
  usdBalance Float    @default(0)
  stocks     Stock[]
  cryptos    Crypto[]
  settings   Settings?
}

model Stock {
  id           String   @id @default(uuid())
  ticker       String
  purchasePrice Float
  shares       Float    @default(0)
  priority     Int      @default(0)
  autoSell     Boolean  @default(false)
  autoBuy      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, ticker])
}

model Settings {
  id                String   @id @default(uuid())
  sellThresholdPercent Float   @default(5.0)
  buyThresholdPercent Float   @default(5.0)
  checkFrequencySeconds Int    @default(60)
  tradePlatformApiKey String?
  tradePlatformApiSecret String?
  finnhubApiKey     String?
  krakenApiKey      String?
  krakenApiSign     String?
  binanceTradeApi   String? @default("https://api.binance.us/api/v3/order")
  binanceApiKey     String?
  binanceApiSecret  String?
  alphaVantageApiKey String?
  coinDeskApiKey    String?
  openAIApiKey      String?
  anthropicApiKey   String?
  googleApiKey      String?
  researchApiPreference String @default("openai") // Values: "openai" or "anthropic"
  enableAutoStockTrading Boolean @default(false)
  enableAutoCryptoTrading Boolean @default(false)
  enableManualCryptoTrading Boolean @default(false)
  enableFinnHubWebSocket Boolean @default(true)
  enableKrakenWebSocket Boolean @default(true)
  krakenWebsocketUrl String @default("wss://ws.kraken.com/v2")
  userId            String   @unique @db.Uuid
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id           String   @id @default(uuid())
  stockId      String
  stock        Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  action       String   // 'buy' or 'sell'
  shares       Float
  price        Float
  totalAmount  Float
  createdAt    DateTime @default(now())
  userId       String   @db.Uuid
}

model Crypto {
  id           String   @id @default(uuid())
  symbol       String
  purchasePrice Float
  lastPrice    Float?   // Latest price from WebSocket
  shares       Float    @default(0)
  priority     Int      @default(0)
  autoSell     Boolean  @default(false)
  autoBuy      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions CryptoTransaction[]
  autoTradeSettings CryptoAutoTradeSettings?
  microProcessingSettings MicroProcessingSettings?

  @@unique([userId, symbol])
}

model CryptoTransaction {
  id           String   @id @default(uuid())
  cryptoId     String
  crypto       Crypto   @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  action       String   // 'buy' or 'sell'
  shares       Float
  price        Float
  totalAmount  Float
  apiRequest   String?  @db.Text  // Store the API request body for troubleshooting
  apiResponse  String?  @db.Text  // Store the API response for troubleshooting
  logInfo      String?  @db.Text  // Additional logging information
  createdAt    DateTime @default(now())
  expiresAt    DateTime @default(dbgenerated("(now() + interval '7 days')")) // Default 7-day retention
  userId       String   @db.Uuid
}

model CryptoAutoTradeSettings {
  id                   String   @id @default(uuid())
  cryptoId             String   @unique
  crypto               Crypto   @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  buyThresholdPercent  Float    @default(5.0)
  sellThresholdPercent Float    @default(5.0)
  enableContinuousTrading Boolean @default(false)
  oneTimeBuy           Boolean  @default(false)
  oneTimeSell          Boolean  @default(false)
  nextAction           String   @default("buy") // 'buy' or 'sell'
  tradeByShares        Boolean  @default(true)
  tradeByValue         Boolean  @default(false)
  sharesAmount         Float    @default(0)
  totalValue           Float    @default(0)
  orderType            String   @default("market") // market, limit, iceberg, stop-loss, take-profit, etc.
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model CryptoHistoricalData {
  id           String   @id @default(uuid())
  symbol       String
  timestamp    DateTime
  unit         String   @default("MINUTE")
  open         Float
  high         Float
  low          Float
  close        Float
  volume       Float?
  quoteVolume  Float?
  instrument   String?
  market       String?
  createdAt    DateTime @default(now())
  
  @@unique([symbol, timestamp], name: "symbol_timestamp")
  @@index([symbol, timestamp])
}

model CryptoAutoTradeLock {
  cryptoId     String   @id
  symbol       String
  lockedAt     DateTime @default(now())
  lockedBy     String   @db.Uuid
  action       String   // 'buy' or 'sell'
}

model MicroProcessingSettings {
  id                String   @id @default(uuid())
  cryptoId          String   @unique
  crypto            Crypto   @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  enabled           Boolean  @default(false)
  sellPercentage    Float    @default(0.5)
  tradeByShares     Float    @default(0)
  tradeByValue      Boolean  @default(false)
  totalValue        Float    @default(0)
  websocketProvider String   @default("binance") // 'kraken', 'coinbase', or 'binance'
  tradingPlatform   String   @default("binance") // 'kraken', 'coinbase', or 'binance'
  purchasePrice     Float?   // The purchase price to use for sell calculations
  lastBuyPrice      Float?
  lastBuyShares     Float?
  lastBuyTimestamp  DateTime?
  processingStatus  String?  // 'buying', 'selling', 'idle'
  testMode          Boolean  @default(false) // If true, will simulate trades without executing them
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
