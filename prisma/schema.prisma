generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id         String   @id @db.Uuid
  email      String   @unique
  createdAt  DateTime @default(now())
  stocks     Stock[]
  cryptos    Crypto[]
  settings   Settings?
}

model Stock {
  id           String   @id @default(uuid())
  ticker       String
  purchasePrice Float
  shares       Float    @default(0)
  priority     Int      @default(0)
  autoSell     Boolean  @default(false)
  autoBuy      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, ticker])
}

model Settings {
  id                String   @id @default(uuid())
  sellThresholdPercent Float   @default(5.0)
  buyThresholdPercent Float   @default(5.0)
  checkFrequencySeconds Int    @default(60)
  tradePlatformApiKey String?
  tradePlatformApiSecret String?
  finnhubApiKey     String?
  krakenApiKey      String?
  krakenApiSign     String?
  enableAutoStockTrading Boolean @default(false)
  enableAutoCryptoTrading Boolean @default(false)
  enableManualCryptoTrading Boolean @default(false)
  krakenWebsocketUrl String @default("wss://ws.kraken.com/v2")
  userId            String   @unique @db.Uuid
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id           String   @id @default(uuid())
  stockId      String
  stock        Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  action       String   // 'buy' or 'sell'
  shares       Float
  price        Float
  totalAmount  Float
  createdAt    DateTime @default(now())
  userId       String   @db.Uuid
}

model Crypto {
  id           String   @id @default(uuid())
  symbol       String
  purchasePrice Float
  shares       Float    @default(0)
  priority     Int      @default(0)
  autoSell     Boolean  @default(false)
  autoBuy      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions CryptoTransaction[]

  @@unique([userId, symbol])
}

model CryptoTransaction {
  id           String   @id @default(uuid())
  cryptoId     String
  crypto       Crypto   @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  action       String   // 'buy' or 'sell'
  shares       Float
  price        Float
  totalAmount  Float
  apiRequest   String?  @db.Text  // Store the API request body for troubleshooting
  apiResponse  String?  @db.Text  // Store the API response for troubleshooting
  logInfo      String?  @db.Text  // Additional logging information
  createdAt    DateTime @default(now())
  userId       String   @db.Uuid
}
